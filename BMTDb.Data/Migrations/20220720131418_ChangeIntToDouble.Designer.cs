// <auto-generated />
using System;
using BMTDb.Data.Concrete.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BMTDb.Data.Migrations
{
    [DbContext(typeof(BMTDbContext))]
    [Migration("20220720131418_ChangeIntToDouble")]
    partial class ChangeIntToDouble
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BMTDb.Entity.Cast", b =>
                {
                    b.Property<int>("CastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CastId"), 1L, 1);

                    b.Property<bool?>("Adult")
                        .HasColumnType("bit");

                    b.Property<string>("Character")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Known_for_Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Original_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Popularity")
                        .HasColumnType("float");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CastId");

                    b.ToTable("Casts");
                });

            modelBuilder.Entity("BMTDb.Entity.Credit", b =>
                {
                    b.Property<int?>("CrewId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("CastId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("CrewId", "Id");

                    b.HasIndex("CastId");

                    b.HasIndex("MovieId");

                    b.ToTable("Credits");
                });

            modelBuilder.Entity("BMTDb.Entity.Crew", b =>
                {
                    b.Property<int>("CrewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CrewId"), 1L, 1);

                    b.Property<bool?>("Adult")
                        .HasColumnType("bit");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Job")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Known_for_Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Original_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Popularity")
                        .HasColumnType("float");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CrewId");

                    b.ToTable("Crews");
                });

            modelBuilder.Entity("BMTDb.Entity.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("BMTDb.Entity.Lists.Favourite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("BMTDb.Entity.Lists.FavouriteItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FavouriteId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FavouriteId");

                    b.HasIndex("MovieId");

                    b.ToTable("FavouriteItems");
                });

            modelBuilder.Entity("BMTDb.Entity.Lists.Watchlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Watchlists");
                });

            modelBuilder.Entity("BMTDb.Entity.Lists.WatchlistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("WatchlistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("WatchlistId");

                    b.ToTable("WatchlistItems");
                });

            modelBuilder.Entity("BMTDb.Entity.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"), 1L, 1);

                    b.Property<string>("Backdrop")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Budget")
                        .HasColumnType("float");

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IMDBId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Original_Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Popularity")
                        .HasColumnType("float");

                    b.Property<string>("Poster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RatingCount")
                        .HasColumnType("int");

                    b.Property<double?>("Ratings")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RunTime")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TMDbId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tagline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trailer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("BMTDb.Entity.MovieGenre", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenre");
                });

            modelBuilder.Entity("BMTDb.Entity.MovieProductionCompany", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionCompanyId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "ProductionCompanyId");

                    b.HasIndex("ProductionCompanyId");

                    b.ToTable("MovieProductionCompany");
                });

            modelBuilder.Entity("BMTDb.Entity.MovieProductionCountry", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionCountryId")
                        .HasColumnType("int");

                    b.Property<string>("ProductionCountriesProductionCountryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MovieId", "ProductionCountryId");

                    b.HasIndex("ProductionCountriesProductionCountryId");

                    b.ToTable("MovieProductionCountry");
                });

            modelBuilder.Entity("BMTDb.Entity.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonId"), 1L, 1);

                    b.Property<bool?>("Adult")
                        .HasColumnType("bit");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Birthday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Deathday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Homepage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImdbId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Known_for_Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Place_of_Birth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Popularity")
                        .HasColumnType("float");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("BMTDb.Entity.PersonCast", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("CastId")
                        .HasColumnType("int");

                    b.HasKey("PersonId", "CastId");

                    b.HasIndex("CastId");

                    b.ToTable("PersonCast");
                });

            modelBuilder.Entity("BMTDb.Entity.PersonCrew", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("CrewId")
                        .HasColumnType("int");

                    b.HasKey("PersonId", "CrewId");

                    b.HasIndex("CrewId");

                    b.ToTable("PersonCrew");
                });

            modelBuilder.Entity("BMTDb.Entity.ProductionCompany", b =>
                {
                    b.Property<int>("ProductionCompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductionCompanyId"), 1L, 1);

                    b.Property<string>("Logo_Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin_Country")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductionCompanyId");

                    b.ToTable("ProductionCompanies");
                });

            modelBuilder.Entity("BMTDb.Entity.ProductionCountry", b =>
                {
                    b.Property<string>("ProductionCountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductionCountryId");

                    b.ToTable("ProductionCountries");
                });

            modelBuilder.Entity("BMTDb.Entity.Credit", b =>
                {
                    b.HasOne("BMTDb.Entity.Cast", "Casts")
                        .WithMany("MovieCredits")
                        .HasForeignKey("CastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMTDb.Entity.Crew", "Crews")
                        .WithMany("MovieCredits")
                        .HasForeignKey("CrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMTDb.Entity.Movie", "Movies")
                        .WithMany("MovieCredits")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Casts");

                    b.Navigation("Crews");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("BMTDb.Entity.Lists.FavouriteItem", b =>
                {
                    b.HasOne("BMTDb.Entity.Lists.Favourite", "Favourite")
                        .WithMany("FavouriteItems")
                        .HasForeignKey("FavouriteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMTDb.Entity.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Favourite");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("BMTDb.Entity.Lists.WatchlistItem", b =>
                {
                    b.HasOne("BMTDb.Entity.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMTDb.Entity.Lists.Watchlist", "Watchlist")
                        .WithMany("WatchlistItems")
                        .HasForeignKey("WatchlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Watchlist");
                });

            modelBuilder.Entity("BMTDb.Entity.MovieGenre", b =>
                {
                    b.HasOne("BMTDb.Entity.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMTDb.Entity.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("BMTDb.Entity.MovieProductionCompany", b =>
                {
                    b.HasOne("BMTDb.Entity.Movie", "Movie")
                        .WithMany("MovieProductionCompanies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMTDb.Entity.ProductionCompany", "ProductionCompanies")
                        .WithMany("ProductionCompanies")
                        .HasForeignKey("ProductionCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("ProductionCompanies");
                });

            modelBuilder.Entity("BMTDb.Entity.MovieProductionCountry", b =>
                {
                    b.HasOne("BMTDb.Entity.Movie", "Movie")
                        .WithMany("MovieProductionCountries")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMTDb.Entity.ProductionCountry", "ProductionCountries")
                        .WithMany("MovieProductionCountries")
                        .HasForeignKey("ProductionCountriesProductionCountryId");

                    b.Navigation("Movie");

                    b.Navigation("ProductionCountries");
                });

            modelBuilder.Entity("BMTDb.Entity.PersonCast", b =>
                {
                    b.HasOne("BMTDb.Entity.Cast", "Casts")
                        .WithMany("PersonCasts")
                        .HasForeignKey("CastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMTDb.Entity.Person", "Person")
                        .WithMany("PersonCasts")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Casts");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("BMTDb.Entity.PersonCrew", b =>
                {
                    b.HasOne("BMTDb.Entity.Crew", "Crews")
                        .WithMany("PersonCrews")
                        .HasForeignKey("CrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BMTDb.Entity.Person", "Person")
                        .WithMany("PersonCrews")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crews");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("BMTDb.Entity.Cast", b =>
                {
                    b.Navigation("MovieCredits");

                    b.Navigation("PersonCasts");
                });

            modelBuilder.Entity("BMTDb.Entity.Crew", b =>
                {
                    b.Navigation("MovieCredits");

                    b.Navigation("PersonCrews");
                });

            modelBuilder.Entity("BMTDb.Entity.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("BMTDb.Entity.Lists.Favourite", b =>
                {
                    b.Navigation("FavouriteItems");
                });

            modelBuilder.Entity("BMTDb.Entity.Lists.Watchlist", b =>
                {
                    b.Navigation("WatchlistItems");
                });

            modelBuilder.Entity("BMTDb.Entity.Movie", b =>
                {
                    b.Navigation("MovieCredits");

                    b.Navigation("MovieGenres");

                    b.Navigation("MovieProductionCompanies");

                    b.Navigation("MovieProductionCountries");
                });

            modelBuilder.Entity("BMTDb.Entity.Person", b =>
                {
                    b.Navigation("PersonCasts");

                    b.Navigation("PersonCrews");
                });

            modelBuilder.Entity("BMTDb.Entity.ProductionCompany", b =>
                {
                    b.Navigation("ProductionCompanies");
                });

            modelBuilder.Entity("BMTDb.Entity.ProductionCountry", b =>
                {
                    b.Navigation("MovieProductionCountries");
                });
#pragma warning restore 612, 618
        }
    }
}
